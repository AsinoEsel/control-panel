from typing import overload, Literal
from controlpanel.shared.base import Device
from .dummy import *


@overload
def get_device(device_name: Literal["BVGPanel"]) -> SipoShiftRegister: ...
@overload
def get_device(device_name: Literal["BatterySlotBVG-LEDStrip"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["BatteryButton"]) -> Button: ...
@overload
def get_device(device_name: Literal["AuthorizationKeyBVG"]) -> Button: ...
@overload
def get_device(device_name: Literal["Chronometer"]) -> PWM: ...
@overload
def get_device(device_name: Literal["ChronometerLampen"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["BigRedButton"]) -> Button: ...
@overload
def get_device(device_name: Literal["ButtonRed"]) -> Button: ...
@overload
def get_device(device_name: Literal["ButtonGreen"]) -> Button: ...
@overload
def get_device(device_name: Literal["ButtonBlue"]) -> Button: ...
@overload
def get_device(device_name: Literal["ButtonPower"]) -> Button: ...
@overload
def get_device(device_name: Literal["StatusLEDs"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["WarnLED"]) -> PWM: ...
@overload
def get_device(device_name: Literal["WaterPressure"]) -> PWM: ...
@overload
def get_device(device_name: Literal["Temperature"]) -> PWM: ...
@overload
def get_device(device_name: Literal["WaterFlowSensor"]) -> WaterSensor: ...
@overload
def get_device(device_name: Literal["Voltmeter1"]) -> PWM: ...
@overload
def get_device(device_name: Literal["Voltmeter2"]) -> PWM: ...
@overload
def get_device(device_name: Literal["Voltmeter3"]) -> PWM: ...
@overload
def get_device(device_name: Literal["Voltmeter4"]) -> PWM: ...
@overload
def get_device(device_name: Literal["Batterie"]) -> PWM: ...
@overload
def get_device(device_name: Literal["BatterySlotLadestation-LEDStrip"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["AuthorizationKeyCharge"]) -> Button: ...
@overload
def get_device(device_name: Literal["BatteryButtonLadestation"]) -> Button: ...
@overload
def get_device(device_name: Literal["PhiSwitch"]) -> Button: ...
@overload
def get_device(device_name: Literal["MainframeKeys"]) -> PisoShiftRegister: ...
@overload
def get_device(device_name: Literal["MainframeLEDs"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["UVStrobe"]) -> PWM: ...
@overload
def get_device(device_name: Literal["PilzLEDs"]) -> LEDStrip: ...
@overload
def get_device(device_name: Literal["BananaPlugs"]) -> BananaPlugs: ...
@overload
def get_device(device_name: Literal["RedYellowLEDs"]) -> SipoShiftRegister: ...
@overload
def get_device(device_name: Literal["SevenSegmentDisplay"]) -> SevenSegmentDisplay: ...
@overload
def get_device(device_name: Literal["RotaryDial"]) -> RotaryDial: ...
@overload
def get_device(device_name: Literal["PowerSwitch"]) -> Button: ...
@overload
def get_device(device_name: Literal["DialReset"]) -> Button: ...
@overload
def get_device(device_name: Literal["TestHebel"]) -> Button: ...
@overload
def get_device(device_name: Literal["StatusLED"]) -> LEDStrip: ...


devices: dict[str, Device] = dict()


def get_device(device_name) -> Device:
    return devices.get(device_name)
