from typing import overload, Literal
from controlpanel.shared.base import Device
from .dummy import *


@overload
def get_device(device_name: Literal["BVGPanel"]) -> DummySipoShiftRegister: ...
@overload
def get_device(device_name: Literal["BatterySlotBVG-LEDStrip"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["BatteryButton"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["AuthorizationKeyBVG"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["Chronometer"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["ChronometerLampen"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["BigRedButton"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["ButtonRed"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["ButtonGreen"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["ButtonBlue"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["ButtonPower"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["StatusLEDs"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["WarnLED"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["WaterPressure"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["Temperature"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["WaterFlowSensor"]) -> DummyWaterSensor: ...
@overload
def get_device(device_name: Literal["Voltmeter1"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["Voltmeter2"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["Voltmeter3"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["Voltmeter4"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["Batterie"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["BatterySlotLadestation-LEDStrip"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["AuthorizationKeyCharge"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["BatteryButtonLadestation"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["PhiSwitch"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["MainframeKeys"]) -> DummyPisoShiftRegister: ...
@overload
def get_device(device_name: Literal["MainframeLEDs"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["UVStrobe"]) -> DummyPWM: ...
@overload
def get_device(device_name: Literal["PilzLEDs"]) -> DummyLEDStrip: ...
@overload
def get_device(device_name: Literal["BananaPlugs"]) -> DummyBananaPlugs: ...
@overload
def get_device(device_name: Literal["RedYellowLEDs"]) -> DummySipoShiftRegister: ...
@overload
def get_device(device_name: Literal["SevenSegmentDisplay"]) -> DummySevenSegmentDisplay: ...
@overload
def get_device(device_name: Literal["RotaryDial"]) -> DummyRotaryDial: ...
@overload
def get_device(device_name: Literal["PowerSwitch"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["DialReset"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["TestHebel"]) -> DummyButton: ...
@overload
def get_device(device_name: Literal["StatusLED"]) -> DummyLEDStrip: ...


ValidDeviceNames = Literal["AuthorizationKeyBVG", "AuthorizationKeyCharge", "BVGPanel", "BananaPlugs", "Batterie", "BatteryButton", "BatteryButtonLadestation", "BatterySlotBVG-LEDStrip", "BatterySlotLadestation-LEDStrip", "BigRedButton", "ButtonBlue", "ButtonGreen", "ButtonPower", "ButtonRed", "Chronometer", "ChronometerLampen", "DialReset", "MainframeKeys", "MainframeLEDs", "PhiSwitch", "PilzLEDs", "PowerSwitch", "RedYellowLEDs", "RotaryDial", "SevenSegmentDisplay", "StatusLED", "StatusLEDs", "Temperature", "TestHebel", "UVStrobe", "Voltmeter1", "Voltmeter2", "Voltmeter3", "Voltmeter4", "WarnLED", "WaterFlowSensor", "WaterPressure"]


devices: dict[str, Device] = dict()


def get_device(device_name: ValidDeviceNames) -> Device:
    return devices.get(device_name)
