import pygame as pgfrom .games import BaseGamefrom controlpanel.shaders import Shadersfrom .dev_console import DeveloperConsole, console_command, Logger, OutputRedirectorfrom .utils import get_output_size, get_display_flagsfrom collections import dequeimport sysclass GameManager:    def __init__(            self,            resolution: tuple[int, int],            dev_args: list[str] | None = None, *,            is_fullscreen: bool,            use_shaders: bool,            stretch_to_fit: bool,            enable_cheats: bool,    ):        pg.init()        self._games: dict[str:BaseGame] = dict()        self._current_game: BaseGame | None = None        self._resolution = resolution        self._screen = pg.display.set_mode(get_output_size(resolution, is_fullscreen, use_shaders, stretch_to_fit),                                           flags=get_display_flags(is_fullscreen, use_shaders))        self.use_shaders = use_shaders        self.cheats_enabled = enable_cheats        self._dev_console = DeveloperConsole(self, self._screen)        self._logger = Logger(self._screen)        self._running = True        self._show_fps = True        self._frame_time_buffer_time = 3.0        self._frame_times: deque[int] = deque()        self._developer_mode = False        self._dev_args: list[str] = self.parse_dev_args(dev_args) if dev_args is not None else []        sys.stdout = OutputRedirector(self._dev_console.log.print, self._logger.print)    @staticmethod    def parse_dev_args(input_list: list[str]) -> list[str]:        output = []        current = []        for item in input_list:            if item.startswith('-'):                if current:                    output.append(" ".join(current))                current = [item.lstrip('-')]            else:                current.append(item)        if current:            output.append(" ".join(current))        return output    def add_game(self, game: BaseGame, make_current: bool = False):        if self._games.get(game.name) is not None:            raise ValueError(f"Game with name {game.name} already exists!")        self._games[game.name] = game        if make_current:            self._current_game = game    def get_game(self, name: str | None = None) -> BaseGame | None:        if name is None:            return self._current_game        return self._games.get(name)    def draw_fps_counter(self):        if not self._frame_times:            return        avg_fps = 1000 / (sum(self._frame_times) / len(self._frame_times))        if avg_fps < 0.8 * self._current_game.tickrate:            fps_color = (255, 0, 0)        elif 0.8 * self._current_game.tickrate <= avg_fps < 0.95 * self._current_game.tickrate:            fps_color = (255, 255, 0)        else:            fps_color = (0, 255, 0)        max_frame_time = max(self._frame_times)        if max_frame_time > int(1.25 * 1000/max(self._current_game.tickrate, 1.0)):            frame_time_color = (255, 0, 0)        elif int(1.25 * 1000/max(self._current_game.tickrate, 1.0)) >= max_frame_time >= 1/0.95 * 1000/max(self._current_game.tickrate, 1.0):            frame_time_color = (255, 255, 0)        else:            frame_time_color = (0, 255, 0)        self._screen.blit(self._dev_console.font.render(f"FPS: {int(avg_fps)}", True, fps_color), (2, 2))        self._screen.blit(self._dev_console.font.render(f"MAX: {max_frame_time}ms", True, frame_time_color), (2, 22))    @console_command("developer")    def set_developer_mode(self, enable: int):        self._developer_mode = bool(enable)    @console_command("showfps")    def set_fps_counter(self, enable: int):        self._show_fps = bool(enable)    @console_command("toggleconsole")    def toggle_dev_console(self):        self._dev_console.open = not self._dev_console.open    @console_command("quit", "exit")    def quit(self):        self._running = False    def run(self):        if self._current_game is None and self._games:            self._current_game = list(self._games.values())[0]        for arg in self._dev_args:            self._dev_console.handle_command(arg, suppress_logging=True)        if self.use_shaders:            RENDER_SIZE = self._resolution            QUARTER_RENDER_SIZE = (self._resolution[0]//2, self._resolution[1]//2)            crt_shaders = Shaders(texture_sizes=[RENDER_SIZE, QUARTER_RENDER_SIZE, QUARTER_RENDER_SIZE],                                  shader_operations=[(1, "Downscale", {"_MainTex": 0}),                                                     (1, "Threshold", {"_MainTex": 1}),                                                     (1, "Blur_H", {"_MainTex": 1}),                                                     (1, "Blur_V", {"_MainTex": 1}),                                                     (2, "Ghost", {"_MainTex": 1, "_SecondaryTex": 2}),                                                     (0, "Add", {"_MainTex": 0, "_SecondaryTex": 2}),                                                     (0, "CRT", {"_MainTex": 0}),                                                     (-1, "To_BGRA", {"_MainTex": 0}),                                                     ])            # no_shaders = Shaders(texture_sizes=[RENDER_SIZE], shader_operations=[(-1, "To_BGRA", {"_MainTex": 0}),])        clock = pg.time.Clock()        while self._running:            if self._current_game is None:                self._screen.fill((100, 100, 100))                pg.display.flip()                pg.event.pump()                clock.tick(1)                continue            events = pg.event.get()            for event in events:                if event.type == pg.QUIT:                    pg.quit()                elif event.type == pg.KEYDOWN and event.scancode == 53:                    self._dev_console.open = not self._dev_console.open            if self._dev_console.open:                self._dev_console.handle_events(events)            else:                self._current_game.handle_events(events)            self._current_game.update()            self._current_game.render()            pg.transform.scale(self._current_game.screen, self._screen.get_size(), self._screen)            if self._dev_console.open:                self._dev_console.render(self._screen)            if self._developer_mode:                self._logger.render(self._screen)            if self._show_fps:                if self._frame_times.maxlen != max(1, int(self._current_game.tickrate * self._frame_time_buffer_time)):                    self._frame_times = deque(maxlen=max(1, int(self._current_game.tickrate * self._frame_time_buffer_time)))                self.draw_fps_counter()            if self.use_shaders:                crt_shaders.apply([self._screen, ])            pg.display.flip()            dt_ms = clock.tick(self._current_game.tickrate)            self._frame_times.append(dt_ms)            self._current_game._dt = dt_ms / 1000 * self._current_game.timescale        pg.quit()